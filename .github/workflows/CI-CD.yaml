name: Update Project Tree

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'ProjectTree.md'

jobs:
  update-project-tree:
    permissions:
      contents: write

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up tree
        run: sudo apt-get update && sudo apt-get install -y tree

      - name: Generate Project Tree
        run: |
          # Create a function to format the tree output for Markdown
          format_tree_for_markdown() {
            tree -L 4 -I 'target|node_modules' | sed 's/^/    /'
          }
          
          # Generate the tree
          echo "# Project Structure" > ProjectTree.md
          echo "\`\`\`" >> ProjectTree.md
          format_tree_for_markdown >> ProjectTree.md
          echo "\`\`\`" >> ProjectTree.md
          echo "The command that was used to generate this tree is:" >> ProjectTree.md
          echo "\`\`\`" >> ProjectTree.md
          echo "tree -L 4 -I 'target|node_modules'" >> ProjectTree.md
          echo "\`\`\`" >> ProjectTree.md

      - name: Check for changes
        id: check_changes
        run: |
          git diff --quiet ProjectTree.md || echo "changes_exist=true" >> $GITHUB_OUTPUT

      - name: Commit and push changes
        if: steps.check_changes.outputs.changes_exist == 'true'
        env:
          GENERAL_UTILS_GITHUB_ACCESS_TOKEN: ${{ secrets.GENERAL_UTILS_GITHUB_ACCESS_TOKEN }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add ProjectTree.md
          git commit -m "Update project tree structure." -m "Automated update of project structure." --author="GitHub Action <action@github.com>"
          git push https://${{ secrets.GENERAL_UTILS_GITHUB_ACCESS_TOKEN }}@github.com/${{ github.repository }}.git HEAD:main



  build-and-push-docker-images-to-docker-hub:
    needs: update-project-tree
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Generate Backend Version Number
        id: backend-versioning
        run: |
          # Fetch existing tags from Docker Hub
          latest_tag=$(curl -s "https://registry.hub.docker.com/v2/repositories/${{ secrets.DOCKER_USERNAME }}/general-utils-backend/tags/?page_size=1" | jq -r '.results[0].name')
          
          # Default starting version
          default_version="v0.0.0"
          
          # Function to increment version
          increment_version() {
            local version="${1:-$default_version}"
          
            # Ensure version starts with v and has three segments
            if [[ ! "$version" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "Fetched Version: $version"
              version=$default_version
              echo "Invalid version format. Using default version: $version"
            fi
          
            local major=$(echo "$version" | cut -d'.' -f1 | sed 's/v//')
            local minor=$(echo "$version" | cut -d'.' -f2)
            local patch=$(echo "$version" | cut -d'.' -f3)
          
            if [ "$patch" -lt 9 ]; then
              patch=$((patch+1))
              new_version="v$major.$minor.$patch"
            elif [ "$minor" -lt 9 ]; then
              minor=$((minor+1))
              patch=0
              new_version="v$major.$minor.$patch"
            else
              major=$((major+1))
              minor=0
              patch=0
              new_version="v$major.$minor.$patch"
            fi
          
            echo "$new_version"
          }
          
          # Determine new version
          version=$(increment_version "$latest_tag")
          
          echo "Generated Version: $version"
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Generate Frontend Version Number
        id: frontend-versioning
        run: |
          # Fetch existing tags from Docker Hub
          latest_tag=$(curl -s "https://registry.hub.docker.com/v2/repositories/${{ secrets.DOCKER_USERNAME }}/general-utils-frontend/tags/?page_size=1" | jq -r '.results[0].name')
          
          # Default starting version
          default_version="v0.0.0"
          
          # Function to increment version
          increment_version() {
            local version="${1:-$default_version}"
          
            # Ensure version starts with v and has three segments
            if [[ ! "$version" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "Fetched Version: $version"
              version=$default_version
              echo "Invalid version format. Using default version: $version"
            fi
          
            local major=$(echo "$version" | cut -d'.' -f1 | sed 's/v//')
            local minor=$(echo "$version" | cut -d'.' -f2)
            local patch=$(echo "$version" | cut -d'.' -f3)
          
            if [ "$patch" -lt 9 ]; then
              patch=$((patch+1))
              new_version="v$major.$minor.$patch"
            elif [ "$minor" -lt 9 ]; then
              minor=$((minor+1))
              patch=0
              new_version="v$major.$minor.$patch"
            else
              major=$((major+1))
              minor=0
              patch=0
              new_version="v$major.$minor.$patch"
            fi
          
            echo "$new_version"
          }
          
          # Determine new version
          version=$(increment_version "$latest_tag")
          
          echo "Generated Version: $version"
          echo "version=$version" >> $GITHUB_OUTPUT



      - name: Tag and Push Docker Images
        run: |
          docker buildx build --push -t ${{ secrets.DOCKER_USERNAME }}/general-utils-backend:${{ steps.backend-versioning.outputs.version }}  -t ${{ secrets.DOCKER_USERNAME }}/general-utils-backend:latest ./backend
          docker buildx build --push -t ${{ secrets.DOCKER_USERNAME }}/general-utils-frontend:${{ steps.frontend-versioning.outputs.version }} -t ${{ secrets.DOCKER_USERNAME }}/general-utils-frontend:latest ./frontend

      - name: Determine Latest Version
        id: determine-version
        run: |
          frontend_version=${{ steps.frontend-versioning.outputs.version }}
          backend_version=${{ steps.backend-versioning.outputs.version }}

          # Compare versions
          if [ "$(printf "%s\n%s" "$frontend_version" "$backend_version" | sort -V | tail -n 1)" = "$frontend_version" ]; then
            latest_version=$frontend_version
          else
            latest_version=$backend_version
          fi

          echo "latest_version=$latest_version" >> $GITHUB_ENV


      - name: Zip Source Code
        run: |
          zip -r source-code-${{ env.latest_version }}.zip ./backend ./frontend

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: source-code-${{ env.latest_version }}
          path: source-code-${{ env.latest_version }}.zip

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.latest_version }}
          name: Release ${{ env.latest_version }}
          body: |
            This release includes:
            - Frontend version: `${{ steps.frontend-versioning.outputs.version }}`
            - Backend version: `${{ steps.backend-versioning.outputs.version }}`


  deploy-to-ecs:
    needs: build-and-push-docker-images-to-docker-hub
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install latest AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update

      - name: Deploy to ECS
        run: |
          aws ecs register-task-definition --cli-input-json file://infrastructure/ecs-task-definition.json
          aws ecs update-service --cluster general-utils-app-cluster --service general-utils-app-service --launch-type FARGATE --force-new-deployment
