name: Update Project Tree

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'ProjectTree.md'

jobs:
  update-project-tree:
    permissions:
      contents: write

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up tree
        run: sudo apt-get update && sudo apt-get install -y tree

      - name: Generate Project Tree
        run: |
          # Create a function to format the tree output for Markdown
          format_tree_for_markdown() {
            tree -L 4 -I 'target|node_modules' | sed 's/^/    /'
          }
          
          # Generate the tree
          echo "# Project Structure" > ProjectTree.md
          echo "\`\`\`" >> ProjectTree.md
          format_tree_for_markdown >> ProjectTree.md
          echo "\`\`\`" >> ProjectTree.md
          echo "The command that was used to generate this tree is:" >> ProjectTree.md
          echo "\`\`\`" >> ProjectTree.md
          echo "tree -L 4 -I 'target|node_modules'" >> ProjectTree.md
          echo "\`\`\`" >> ProjectTree.md

      - name: Check for changes
        id: check_changes
        run: |
          git diff --quiet ProjectTree.md || echo "changes_exist=true" >> $GITHUB_OUTPUT

      - name: Commit and push changes
        if: steps.check_changes.outputs.changes_exist == 'true'
        env:
          GENERAL_UTILS_GITHUB_ACCESS_TOKEN: ${{ secrets.GENERAL_UTILS_GITHUB_ACCESS_TOKEN }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add ProjectTree.md
          git commit -m "Update project tree structure." -m "Automated update of project structure." --author="GitHub Action <action@github.com>"
          git push https://${{ secrets.GENERAL_UTILS_GITHUB_ACCESS_TOKEN }}@github.com/${{ github.repository }}.git HEAD:main



  build-and-push-docker-compose-image-to-docker-hub:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Generate Version Number
        id: versioning
        run: |
          # Fetch existing tags from Docker Hub
          latest_tag=$(curl -s "https://registry.hub.docker.com/v2/repositories/${{ secrets.DOCKER_USERNAME }}/general-utils/tags/?page_size=1" | jq -r '.results[0].name')
          
          # Default starting version
          default_version="v0.1.0"
          
          # Function to increment version
          increment_version() {
            local version="${1:-$default_version}"
          
            # Ensure version starts with v and has three segments
            if [[ ! "$version" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              version=$default_version
            fi
          
            local major=$(echo "$version" | cut -d'.' -f1 | sed 's/v//')
            local minor=$(echo "$version" | cut -d'.' -f2)
            local patch=$(echo "$version" | cut -d'.' -f3)
          
            if [ "$patch" -lt 9 ]; then
              patch=$((patch+1))
              new_version="v$major.$minor.$patch"
            elif [ "$minor" -lt 9 ]; then
              minor=$((minor+1))
              patch=0
              new_version="v$major.$minor.$patch"
            else
              major=$((major+1))
              minor=0
              patch=0
              new_version="v$major.$minor.$patch"
            fi
          
            echo "$new_version"
          }
          
          # Determine new version
          version=$(increment_version "$latest_tag")
          
          echo "Generated Version: $version"
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Tag and Push Docker Compose Image
        run: |
          docker compose build
          docker tag general-utils ${{ secrets.DOCKER_USERNAME }}/general-utils:${{ steps.versioning.outputs.version }}
          docker push ${{ secrets.DOCKER_USERNAME }}/general-utils:${{ steps.versioning.outputs.version }}

      - name: Create Docker Compose Artifact
        run: |
          mkdir -p docker-compose-artifacts
          cp docker-compose.yaml docker-compose-artifacts/docker-compose-${{ steps.versioning.outputs.version }}.yaml

      - name: Upload Docker Compose Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-compose-files
          path: docker-compose-artifacts/
